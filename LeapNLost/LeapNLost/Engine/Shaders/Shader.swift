//
//  Shader.swift
//  LeapNLost
//
//  Created by Anthony Wong on 2019-02-10.
//  Copyright Â© 2019 bcit. All rights reserved.
//

import Foundation
import GLKit

/**
 * Class for communicating with the shaders.
 */
class Shader {
    
    // Handle to the shaders generated by the shader loader
    var programHandle : GLuint;
    
    // Map that stores the location of uniform variables;
    var uniformMap : [String : GLint];
    
    /**
     * Constructor, program handle is required.
     * programHandle - handle to the shaders
     */
    init(programHandle: GLuint) {
        self.programHandle = programHandle;
        self.uniformMap = [String : GLint]();
        
        setupUniforms();
    }
    
    /**
     * Initializes the map of uniform locations by iterating through
     * each active uniform and adding them to the map.
     */
    func setupUniforms() {
        // Get total number of uniforms
        var total : GLint = -1;
        glGetProgramiv(programHandle, GLenum(GL_ACTIVE_UNIFORMS), &total);
        let characterLimit = 100;
        
        // Array that holds all the uniform names as strings
        var uniformNames : [String] = [String]();
        
        // Get the name of each uniform
        for i in 0..<total {
            // Uniform properties
            var length : GLsizei = -1;
            var size : GLint = -1;
            var type : GLenum = GLenum(GL_ZERO);
            var name : [GLchar] = [GLchar].init(repeating: -1, count: characterLimit);
            
            // Grab information about the uniform
            glGetActiveUniform(self.programHandle, GLuint(i), GLsizei(MemoryLayout<GLchar>.size * characterLimit), &length, &size, &type, &name);
            
            // Parse the character array into a string
            var nameString : String = "";
            for char in name {
                if (char == 0) { // Check for null terminator (\0)
                    break;
                }
                nameString.append(Character(Unicode.Scalar(Int(char.description)!)!));
            }
            
            // Append to array of uniform names
            uniformNames.append(nameString);
        }
        
        // Get and store all uniform locations into the uniform map
        for uniformName in uniformNames {
            uniformMap[uniformName] = glGetUniformLocation(self.programHandle, uniformName);
        }
    }
    
    /**
     * Sets a texture variable in the shader.
     * textureName - the name of the texture uniform in the shader
     * textureNum - the texture number to set to
     */
    func setTexture(textureName: String, textureNum: GLint) {
        // If the texture isn't already in the uniform map, add it
        if (uniformMap[textureName] == nil) {
            uniformMap[textureName] = glGetUniformLocation(self.programHandle, textureName);
        }
        glUniform1i(uniformMap[textureName]!, textureNum);
    }
    
    /**
     * Sets a float variable in the shader.
     * variableName - the name of the variable
     * value - the float value
     */
    func setFloat(variableName: String, value: Float) {
        // If the float isn't already in the uniform map, add it
        if (uniformMap[variableName] == nil) {
            uniformMap[variableName] = glGetUniformLocation(self.programHandle, variableName);
        }
        glUniform1f(uniformMap[variableName]!, value);
    }
    
    /**
     * Sets a vector variable in the shader.
     * variableName - the name of the variable
     * value - the vector value
     */
    func setVector(variableName: String, value: Vector3) {
        // If the vector isn't already in the uniform map, add it
        if (uniformMap[variableName] == nil) {
            uniformMap[variableName] = glGetUniformLocation(self.programHandle, variableName);
        }
        glUniform3fv(uniformMap[variableName]!, 1, value.array);
    }
    
    /**
     * Sets a matrix variable in the shader.
     * variableName - the name of the variable
     * value - the matrix value
     */
    func setMatrix(variableName: String, value: GLKMatrix4) {
        // If the matrix isn't already in the uniform map, add it
        if (uniformMap[variableName] == nil) {
            uniformMap[variableName] = glGetUniformLocation(self.programHandle, variableName);
        }
        glUniformMatrix4fv(uniformMap[variableName]!, 1, GLboolean(GL_FALSE), value.array);
    }
}
