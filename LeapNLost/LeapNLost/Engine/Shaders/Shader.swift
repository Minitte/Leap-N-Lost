//
//  Shader.swift
//  LeapNLost
//
//  Created by Anthony Wong on 2019-02-10.
//  Copyright Â© 2019 bcit. All rights reserved.
//

import Foundation
import GLKit

/**
 * Class for communicating with the shaders.
 */
class Shader {
    
    // Handle to the shaders generated by the shader loader
    var programHandle : GLuint;
    
    /**
     * Constructor, program handle is required.
     * programHandle - handle to the shaders
     */
    init(programHandle: GLuint) {
        self.programHandle = programHandle;
    }
    
    /**
     * Sets a texture variable in the shader.
     * textureName - the name of the texture uniform in the shader
     * textureNum - the texture number to set to
     * texture - the id of the texture
     */
    func setTexture(textureName: String, textureNum: GLint, texture: GLuint) {
        glUniform1i(glGetUniformLocation(self.programHandle, textureName), textureNum);
    }
    
    /**
     * Sets a float variable in the shader.
     * variableName - the name of the variable
     * value - the float value
     */
    func setFloat(variableName: String, value: Float) {
        glUniform1f(glGetUniformLocation(self.programHandle, variableName), value);
    }
    
    /**
     * Sets a vector variable in the shader.
     * variableName - the name of the variable
     * value - the vector value
     */
    func setVector(variableName: String, value: Vector3) {
        glUniform3fv(glGetUniformLocation(self.programHandle, variableName), 1, value.array);
    }
    
    /**
     * Sets a matrix variable in the shader.
     * variableName - the name of the variable
     * value - the matrix value
     */
    func setMatrix(variableName: String, value: GLKMatrix4) {
        glUniformMatrix4fv(glGetUniformLocation(self.programHandle, variableName), 1, GLboolean(GL_FALSE), value.array);
    }
}
